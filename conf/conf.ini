[CONFIG]

#FAB path
AFP_PATH = ''

# Username for connecting to EC2 instaces
SERVER_USERNAME = ubuntu


# Full local path for .ssh
SSH_PATH = ~/.ssh


# Name of the private key file you use to connect to EC2 instance
EC2_KEY_NAME = aws.pem

SSH_SETTING_PATH = ''

# Don't edit. Full path of the ssh key you use to connect to EC2 instances
SSH_PRIVATE_KEY_PATH = %(SSH_SETTING_PATH)s/%(EC2_KEY_NAME)s

# Project name
PROJECT_NAME = polls

# Where to install apps
APPS_DIR = /home/%(SERVER_USERNAME)s/webapps

# Where you want your project installed: /APPS_DIR/PROJECT_NAME
PROJECT_PATH = %(APPS_DIR)s/%(PROJECT_NAME)s

# App domains
DOMAINS = www.example.com example.com


# Path for virtualenvs
VIRTUALENV_DIR = /home/%(SERVER_USERNAME)s/.virtualenvs

# Email for the server admin
ADMIN_EMAIL = webmaster@example.com

# Git username for the server
GIT_USERNAME = username


# Name of the private key file used for github deployments
GITHUB_DEPLOY_KEY_NAME = github


# Don't edit. Local path for deployment key you use for github
GITHUB_DEPLOY_KEY_PATH = %(SSH_SETTING_PATH)s/%(GITHUB_DEPLOY_KEY_NAME)s


# Path to the repo of the application you want to install
GITHUB_REPO =

GITHUB_BRANCH = master

GITBUH_STAGING_BRANCH = staging

GITBUH_DEV_BRANCH = development


# Virtualenv activate command
ACTIVATE = source /home/%(SERVER_USERNAME)s/.virtualenvs/%(PROJECT_NAME)s/bin/activate

# Name tag for your server instance on EC2
INSTANCE_NAME_TAG = AppServer
INSTANCE_RECIPE = appserver

[PRODUCTION]
# load balancer url
LB_URL = api-load-balancer-1346515178.us-east-1.elb.amazonaws.com

# load balancer name
LB_NAME = api-load-balancer

# AMI name.
ec2_amis = ami-3456f37a

# Name of the keypair you use in EC2.
ec2_keypair = default

# Name of the security group.
ec2_secgroups = default

# API Name of instance type.
ec2_instancetype = t1.micro

[PRODUCTION_ENV_CONFIG]

# EC2 key.
AWS_ACCESS_KEY_ID = ''

# EC2 secret.
AWS_SECRET_ACCESS_KEY = ''

S3_STATIC_BUCKET_STORAGE = assets.example.com

S3_MEDIA_BUCKET_STORAGE = media.example.com

DATABASE_URL = postgres://root:password@polls-production.cypujhdsdh.us-east-1.rds.amazonaws.com:5432/polls

STATIC_URL = http://assets.example.com.s3-website-us-east-1.amazonaws.com/

MEDIA_URL = http://media.example.com.s3-website-us-east-1.amazonaws.com/

SETTING_FILE = production

BROKER_URL = amqp://guest:guest@ec2-45-45-78-98.compute-1.amazonaws.com:5672//


[STAGING]
# load balancer url
LB_URL = api-load-balancer-staging-1394986200.us-east-1.elb.amazonaws.com

# load balancer name
LB_NAME = api-load-balancer-staging

# AMI name.
ec2_amis = ami-3456f37a

# Name of the keypair you use in EC2.
ec2_keypair = default

# Name of the security group.
ec2_secgroups = default

# API Name of instance type.
ec2_instancetype = t1.micro

[STAGING_ENV_CONFIG]

# EC2 key.
AWS_ACCESS_KEY_ID = ''

# EC2 secret.
AWS_SECRET_ACCESS_KEY = ''

S3_STATIC_BUCKET_STORAGE = assets.example.com

S3_MEDIA_BUCKET_STORAGE = media.example.com

DATABASE_URL = postgres://password:test@127.0.0.1:5432/polls

STATIC_URL = http://assets.example.com.s3-website-us-east-1.amazonaws.com/

MEDIA_URL = http://media.example.com.s3-website-us-east-1.amazonaws.com/

SETTING_FILE = staging